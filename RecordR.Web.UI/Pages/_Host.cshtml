@page "/"
@namespace RecordR.Web.UI.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RecordR.Web.UI</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="_framework/blazor.server.js"></script>

    <script>
// the script blazor calls on startup
window.setup = () => {

    // get references to html elements used later
    const record = document.querySelector('.record');
    const stop = document.querySelector('.stop');
    const soundClips = document.querySelector('.sound-clips');
    const sources = document.querySelector('.sources');

    // the model to which we'll bind the view
    const viewModel = {
        title: 'Audio Sources',
        devices: null,
        selectedSource: 'default'
    };

    // set up the app
    var app = new Vue({ 
        el: '#app', 
        data: viewModel,
        mounted() {
            // get the list of audio sources on the machine and show them
            navigator.mediaDevices.enumerateDevices().then((devices) => {
                devices = devices.filter((d) => d.kind === 'audioinput');
                viewModel.devices = devices;
            });
        },
        watch: {
            selectedSource: function(val) {
                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                    console.log(viewModel.selectedSource);
                    navigator.mediaDevices.getUserMedia ({
                    audio: {
                        deviceId: viewModel.selectedSource
                    }})
                    .then(function(stream) {
                        const mediaRecorder = new MediaRecorder(stream);
                        record.onclick = function() {
                            mediaRecorder.start();
                            console.log(mediaRecorder.state);
                            console.log("recorder started");
                            record.style.background = "red";
                            record.style.color = "black";
                        }
                        let chunks = [];

                        mediaRecorder.ondataavailable = function(e) {
                            chunks.push(e.data);
                        }

                        stop.onclick = function() {
                            mediaRecorder.stop();
                            console.log(mediaRecorder.state);
                            console.log("recorder stopped");
                            record.style.background = "";
                            record.style.color = "";
                        }

                        mediaRecorder.onstop = function(e) {
                            console.log("recorder stopped");

                            const clipName = prompt('Enter a name for your sound clip');

                            const clipContainer = document.createElement('article');
                            const clipLabel = document.createElement('p');
                            const audio = document.createElement('audio');
                            const deleteButton = document.createElement('button');
                                    
                            clipContainer.classList.add('clip');
                            audio.setAttribute('controls', '');
                            deleteButton.innerHTML = "Delete";
                            clipLabel.innerHTML = clipName;

                            clipContainer.appendChild(audio);
                            clipContainer.appendChild(clipLabel);
                            clipContainer.appendChild(deleteButton);
                            soundClips.appendChild(clipContainer);

                            const blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });
                            chunks = [];
                            const audioURL = window.URL.createObjectURL(blob);
                            audio.src = audioURL;

                            deleteButton.onclick = function(e) {
                                let evtTgt = e.target;
                                evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);
                            }
                        }
                    })
                    .catch(function(err) {
                        console.log('The following getUserMedia error occured: ' + err);
                    });
                } 
                else 
                {
                    console.log('getUserMedia not supported on your browser!');
                }
            }
        },
        computed: {
            console: () => console,
            viewModel: () => viewModel
        }
    });
}
    </script>
</body>
</html>
